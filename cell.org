Life in my Computer

* http://www.detectingdesign.com/dnamutationrates.html
* start with compiler
http://homepage.ntlworld.com/edmund.grimley-evans/bcompiler.html
stored in ~/dev/bcompiler

* look at hex1
hex1.he is human-readable, commented file from hex1, in i386 assembler

od -An -tx1 hex1


 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00
 02 00 03 00 01 00 00 00 54 80 04 08 34 00 00 00
 00 00 00 00 00 00 00 00 34 00 20 00 01 00 00 00
 00 00 00 00 01 00 00 00 00 00 00 00 00 80 04 08
 00 80 04 08 bf 00 00 00 bf 00 00 00 05 00 00 00
 00 10 00 00 e8 25 00 00 00 c1 e0 04 50 e8 1c 00
 00 00 01 04 24 e8 03 00 00 00 58 eb e7 31 db 43
 8d 4c 24 04 89 da b8 04 00 00 00 cd 80 c3 e8 1f
 00 00 00 83 f8 23 75 0c e8 15 00 00 00 83 f8 0a
 75 f6 eb ea 83 e8 30 7c e5 83 f8 30 7c 03 83 e8
 27 c3 6a 00 31 db 89 e1 89 da 42 b8 03 00 00 00
 cd 80 85 c0 74 02 58 c3 31 c0 89 c3 40 cd 80

can compile itself:

./hex1 < hex1.he > hexi
od -An -tx1 hexi

 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00
 02 00 03 00 01 00 00 00 54 80 04 08 34 00 00 00
 00 00 00 00 00 00 00 00 34 00 20 00 01 00 00 00
 00 00 00 00 01 00 00 00 00 00 00 00 00 80 04 08
 00 80 04 08 bf 00 00 00 bf 00 00 00 05 00 00 00
 00 10 00 00 e8 25 00 00 00 c1 e0 04 50 e8 1c 00
 00 00 01 04 24 e8 03 00 00 00 58 eb e7 31 db 43
 8d 4c 24 04 89 da b8 04 00 00 00 cd 80 c3 e8 1f
 00 00 00 83 f8 23 75 0c e8 15 00 00 00 83 f8 0a
 75 f6 eb ea 83 e8 30 7c e5 83 f8 30 7c 03 83 e8
 27 c3 6a 00 31 db 89 e1 89 da 42 b8 03 00 00 00
 cd 80 85 c0 74 02 58 c3 31 c0 89 c3 40 cd 80

basically, it takes the written characters and translates them to hexadecimal numbers in main memory

* create minimal gene from hex1.he: remove all comments, tabs, line breaks:

cat cell.he

7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 02 00 03 00 01 00 00 00 54 80 04 08 34 00 00 00 00 00 00 00 00 00 00 00 34 00 20 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 80 04 08 00 80 04 08 bf 00 00 00 bf 00 00 00 05 00 00 00 00 10 00 00 e8 25 00 00 00 c1 e0 04 50 e8 1c 00 00 00 01 04 24 e8 03 00 00 00 58 eb e7 31 db 43 8d 4c 24 04 89 da b8 04 00 00 00 cd 80 c3 e8 1f 00 00 00 83 f8 23 75 0c e8 15 00 00 00 83 f8 0a 75 f6 eb ea 83 e8 30 7c e5 83 f8 30 7c 03 83 e8 27 c3 6a 00 31 db 89 e1 89 da 42 b8 03 00 00 00 cd 80 85 c0 74 02 58 c3 31 c0 89 c3 40 cd 80

* compile it with hex1:

./hex1 < cell.he > cell
od -An -tx1 cell

 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00
 02 00 03 00 01 00 00 00 54 80 04 08 34 00 00 00
 00 00 00 00 00 00 00 00 34 00 20 00 01 00 00 00
 00 00 00 00 01 00 00 00 00 00 00 00 00 80 04 08
 00 80 04 08 bf 00 00 00 bf 00 00 00 05 00 00 00
 00 10 00 00 e8 25 00 00 00 c1 e0 04 50 e8 1c 00
 00 00 01 04 24 e8 03 00 00 00 58 eb e7 31 db 43
 8d 4c 24 04 89 da b8 04 00 00 00 cd 80 c3 e8 1f
 00 00 00 83 f8 23 75 0c e8 15 00 00 00 83 f8 0a
 75 f6 eb ea 83 e8 30 7c e5 83 f8 30 7c 03 83 e8
 27 c3 6a 00 31 db 89 e1 89 da 42 b8 03 00 00 00
 cd 80 85 c0 74 02 58 c3 31 c0 89 c3 40 cd 80

and make it executable

chmod ug+x cell

* now compile cell.he with cell

./cell < cell.he > celli
od -An -tx1 -w1024 celli
 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 02 00 03 00 01 00 00 00 54 80 04 08 34 00 00 00 00 00 00 00 00 00 00 00 34 00 20 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 80 04 08 00 80 04 08 bf 00 00 00 bf 00 00 00 05 00 00 00 00 10 00 00 e8 25 00 00 00 c1 e0 04 50 e8 1c 00 00 00 01 04 24 e8 03 00 00 00 58 eb e7 31 db 43 8d 4c 24 04 89 da b8 04 00 00 00 cd 80 c3 e8 1f 00 00 00 83 f8 23 75 0c e8 15 00 00 00 83 f8 0a 75 f6 eb ea 83 e8 30 7c e5 83 f8 30 7c 03 83 e8 27 c3 6a 00 31 db 89 e1 89 da 42 b8 03 00 00 00 cd 80 85 c0 74 02 58 c3 31 c0 89 c3 40 cd 80

* TADA!

* run everything in /tmp dir, to keep living things in memory
* backup stages to ~/dev/cell

* create new group with very restrictive rights

* create empty sample program
touch sample

* create bash control script

- backup running gene stock every N=1 tries

- take a gene from stock
- change a random number of bits

  changebits < cellold > cellnew

  ((- compile child via   cellold < $(od -An -tx1 -w1024 cellnew) > cellnew))
- make executable
- try to execute it ./cellnew < sample && add to gene stock

- check reproduction:
  take any cell from gene stock, call it cellnew
  cellnew < any other gene seq > cellcheck
  - has to finish in 10sec
  - if yes: add cellcheck to gene stock

** generate a random byte:
od -vAn -N1 -tx1 /dev/urandom | tr -cd 0123456789abcdef

** write a given byte to fourth position
echo -ne \\xFE |dd conv=notrunc bs=1 count=1 seek=3 of=celli


** better way: write program in python for control

** better still: write program in assembler



* find true minimal compiler
* find intelligence
